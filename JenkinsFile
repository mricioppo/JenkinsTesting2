pipeline {

    parameters {
        string(name: 'environment', defaultValue: 'terraform', description: 'Workspace/environment file to use for deployment')
        booleanParam(name: 'autoApprove', defaultValue: true, description: 'Automatically run apply after generating plan?')
        string(name: 'indirizzoDB', defaultVaule: '0.0.0.0', description: 'indirizzo del database Postgres')
    }

    environment {

    }

    agent  any
        options {
                timestamps ()
            }
    stages {
        stage('checkout') {
            steps {
                 script{
                        dir("terraform")
                        {
                            git "https://github.com/mricioppo/JenkinsTesting2.git"
                        }
                    }
                }
            }

        stage('Plan') {
            steps {
                sh 'pwd;cd terraform/terraform-client ; terraform init -input=false'
                sh 'pwd;cd terraform/terraform-client ; terraform workspace new ${environment}'
                sh 'pwd;cd terraform/terraform-client ; terraform workspace select ${environment}'
                sh "pwd;cd terraform/terraform-client ; terraform plan -input=false -out tfplan"
                sh 'pwd;cd terraform/terraform-client ; terraform show -no-color tfplan > tfplan.txt'
            }
        }

        stage('Approval') {
           when {
               not {
                   equals expected: true, actual: params.autoApprove
               }
           }
           steps {
               script {
                    def plan = readFile 'terraform/terraform-client/tfplan.txt'
                    input message: "Do you want to apply the plan?",
                    parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
               }
           }   
        }

        stage('Apply') {
            steps {
                println("L'indirizzo Ã¨ " + ${params.indirizzoDB})
            }
        }
    }

  }
